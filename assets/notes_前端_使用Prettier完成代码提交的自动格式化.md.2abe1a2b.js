import{_ as s,o as n,c as a,h as e}from"./app.30a55816.js";const C=JSON.parse('{"title":"使用Prettier完成代码提交的自动格式化","description":"","frontmatter":{},"headers":[{"level":2,"title":"最终效果","slug":"最终效果","link":"#最终效果","children":[]},{"level":2,"title":"使用的npm包","slug":"使用的npm包","link":"#使用的npm包","children":[]},{"level":2,"title":"为什么做（WhyHow）","slug":"为什么做-whyhow","link":"#为什么做-whyhow","children":[]},{"level":2,"title":"怎么做（How）","slug":"怎么做-how","link":"#怎么做-how","children":[]},{"level":2,"title":"具体命令（躲懒不看文档的看这里~）","slug":"具体命令-躲懒不看文档的看这里","link":"#具体命令-躲懒不看文档的看这里","children":[]},{"level":2,"title":"一些注意事项","slug":"一些注意事项","link":"#一些注意事项","children":[{"level":3,"title":"win电脑.prettierrc.json写入失败","slug":"win电脑-prettierrc-json写入失败","link":"#win电脑-prettierrc-json写入失败","children":[]},{"level":3,"title":"配置gitHook之后 commit不会自动格式化vue文件","slug":"配置githook之后-commit不会自动格式化vue文件","link":"#配置githook之后-commit不会自动格式化vue文件","children":[]}]}],"relativePath":"notes/前端/使用Prettier完成代码提交的自动格式化.md","lastUpdated":null}'),l={name:"notes/前端/使用Prettier完成代码提交的自动格式化.md"},p=e(`<h1 id="使用prettier完成代码提交的自动格式化" tabindex="-1">使用Prettier完成代码提交的自动格式化 <a class="header-anchor" href="#使用prettier完成代码提交的自动格式化" aria-hidden="true">#</a></h1><h2 id="最终效果" tabindex="-1">最终效果 <a class="header-anchor" href="#最终效果" aria-hidden="true">#</a></h2><ol><li>执行git commit</li><li>代码自动完成我们定制规则的格式化功能，并提交到本地</li></ol><h2 id="使用的npm包" tabindex="-1">使用的npm包 <a class="header-anchor" href="#使用的npm包" aria-hidden="true">#</a></h2><p><strong>prettier</strong>：功能依赖包</p><p><strong>husky</strong>：提供gitHook相关功能</p><p><strong>lint-staged</strong>：让命令只对发生更改的文件生效</p><h2 id="为什么做-whyhow" tabindex="-1">为什么做（WhyHow） <a class="header-anchor" href="#为什么做-whyhow" aria-hidden="true">#</a></h2><p>​ 在未建立规范之前，每个人的代码风格都是不一致的，并且开发过程中可能会出现忘记格式化，手误的问题，如果在提交之前，可以自动抹平差异统一多人开发风格，这时候作用就体现出来了</p><p>​ 代码风格是每一个程序员都要面对的问题，不论是在个人开发还是在团队协作中，都明白较好的代码风格是保证日后可维护性的关键，所以连不懂的开发或许都知道，要注意代码风格</p><h2 id="怎么做-how" tabindex="-1">怎么做（How） <a class="header-anchor" href="#怎么做-how" aria-hidden="true">#</a></h2><p>​ 到了正在的推进时期，就会面对很多难题，无法确定一个所有人都满意的方案，而就算是少数服从多数，在实际开发中落实也会遇到一大堆问题，例如，编辑器的不同，格式化工具不同，或者说完全没这个习惯，好不容易决定推进了，每次代码审核都需要修改这种细节问题，一来二去就搁置了，实在是头疼，到底该如何将事情完美的落实下去呢？</p><p>​ 这里我们就需要一个权威的规范来帮助我们约束成为一个风格，Prettier表示我先给一个规范，大家先用起来，保证代码的可读性与可维护性，然后大家都遵循这和规则。</p><p>​ 而prettier本身是一个<code>An opinionated code formatter</code> 的格式化工具，我是一个规矩非常严格的框架，并不会给你很多的配置项，喜欢用就用，不喜欢就不用，绝大部分的编辑器集成了prettier，在编辑器的约束下，大家都遵循这个方案就好了</p><h2 id="具体命令-躲懒不看文档的看这里" tabindex="-1">具体命令（躲懒不看文档的看这里~） <a class="header-anchor" href="#具体命令-躲懒不看文档的看这里" aria-hidden="true">#</a></h2><blockquote><p>当前的prettier版本是2.4.1，如果版本号不一致，建议还是看官网</p></blockquote><ol><li>vscode安装prettier</li><li>项目安装prettier</li></ol><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">npm install --save-dev --save-exact prettier</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="3"><li>创建配置文件</li></ol><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">{</span><span style="color:#A6ACCD;">}</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.prettierrc.json</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="4"><li>创建说明不需要格式化的文件 <ol><li>创建文件<a href="https://prettier.io/docs/en/ignore.html" title="https://prettier.io/docs/en/ignore.html" target="_blank" rel="noreferrer">.prettierignore</a></li><li>写入内容</li></ol></li></ol><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;"># Ignore artifacts:</span></span>
<span class="line"><span style="color:#A6ACCD;">build</span></span>
<span class="line"><span style="color:#A6ACCD;">coverage</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="5"><li><p>执行命令<code>npx prettier --write .</code>,格式化现有代码，测试功能是否正常</p></li><li><p>编写配置文件</p></li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// json文件改为js文件（看个人习惯）写入内容</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">singleQuote</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 单引号</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">trailingComma</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">es5</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 对象属性最后有 &quot;,&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">semi</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 是否需要分号</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">printWidth</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">110</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 一行最多120</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">jsxSingleQuote</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// jsx使用单引号</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">tabWidth</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 一个tab代表几个空格数，默认就是2</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">useTabs</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 不使用缩进符，而使用空格</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">jsxBracketSameLine</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ol start="7"><li>再次执行<code>npx prettier --write .</code>，对格式化规则有建议参考文档对配置进行修改，知道自己满意</li><li>配置gitHook钩子(必须先加入git仓库，不然会无效果)</li></ol><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">npx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mrm@</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">lint-staged</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="9"><li>将代码格式改乱，尝试commit一下，查看功能是否正常（提交之前会被自动格式化）</li></ol><h2 id="一些注意事项" tabindex="-1">一些注意事项 <a class="header-anchor" href="#一些注意事项" aria-hidden="true">#</a></h2><h3 id="win电脑-prettierrc-json写入失败" tabindex="-1">win电脑.prettierrc.json写入失败 <a class="header-anchor" href="#win电脑-prettierrc-json写入失败" aria-hidden="true">#</a></h3><p>这个问题在同事电脑上发现的，使用vscode中powershell执行<code>echo {}&gt; .prettierrc.json</code>,会无写入内容，后面执行的命令也会失败，这里请使用电脑的cmd打开目标文件夹，执行该命令，这样测试是可行的</p><h3 id="配置githook之后-commit不会自动格式化vue文件" tabindex="-1">配置gitHook之后 commit不会自动格式化vue文件 <a class="header-anchor" href="#配置githook之后-commit不会自动格式化vue文件" aria-hidden="true">#</a></h3><p>这里需要修改在<code>package.json</code>中默认写入的lint-staged中的命令</p><blockquote><p>这里根据项目中是否存在eslint，会写入不太一致，但是问题不打</p></blockquote><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">lint-staged</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">*.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">eslint --cache --fix</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>统一改成</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">lint-staged</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">*.{js,css,md,vue}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">prettier --write</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这样每次commit的时候就会自动格式化代码了</p>`,37),o=[p];function t(r,i,c,d,y,D){return n(),a("div",null,o)}const u=s(l,[["render",t]]);export{C as __pageData,u as default};
